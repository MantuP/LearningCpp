#include<global.h>
#include<Logger.h>
#include<signal.h>
#include <sqlca.h>
#define ERRCODE           sqlca.sqlcode
#define INIT_STR(x)                     (memset(x,'\0',sizeof(x)));

extern void UpdateProcess(int ProcessId,char Status);
extern long   gUnixPid;
extern char gProcessStartDate[15] ;
extern char   gErrorMessage[200] ;
extern char  gLockFilePathName[200];
extern long gSignalProcessId ;
extern char gConnectString[50] ;

void SignalHandler(int sig_num)
{
      /* re-set the signal handler again to catch_int, for next time */

      printf ("Caught signal %d\n", sig_num);

      INIT_STR(gErrorMessage) ;
/*
        Reason for DB Reconnection: If process is interupted(Killed,quit,interrupt..etc),DB connection will be disconnected when it is running inside cursor while loop.        So it is not possible to update the status of the process. 
        Solution: Release the work and reconnect to DB and then update the Process status 
*/

      EXEC SQL ROLLBACK WORK RELEASE;

      EXEC SQL CONNECT :gConnectString;

      if(ERRCODE != 0)
      {
         TRACEENTRY(1,"%s","SignalHandler: Error Connecting to the Database. Exiting from the Process.");
         TRACEENTRY(1,"%s : -%s-","SignalHandler: ConnectString Input: ",gConnectString);
         exit(0);
      }


      switch (sig_num)
      {
          case SIGHUP:
          {
             TRACEENTRY(1,"%s","SIGHUP Ignored");
             sprintf(gErrorMessage,"%s","SIGHUP Ignored");
             UpdateProcess(gSignalProcessId,'S');
             break;
          }
   /*     case SIGKILL:
          {
             TRACEENTRY(1,"%s","SIGKILL::Signal Kill");
             strcpy(gErrorMessage,"%s","SIGKILL::Signal Kill");
             printf("sigkilla");
             exit(0);
          }
   */     case SIGABRT:
          {
             TRACEENTRY(1,"%s","SIGABRT:: Abort Signal Generated.");
             sprintf(gErrorMessage,"%s","SIGABRT:: Abort Signal Generated.");
             UpdateProcess(gSignalProcessId,'S');
             exit(0);
          }
          case SIGINT:
          {
             TRACEENTRY(1,"%s","SIGINT:: Terminal interrupt signal.");
             sprintf(gErrorMessage,"%s","SIGINT:: Terminal interrupt signal.");
             UpdateProcess(gSignalProcessId,'S');
             exit(0);
          }
          case SIGQUIT:
          {
             TRACEENTRY(1,"%s","SIGQUIT:: Terminal quit signal encountered.");
             sprintf(gErrorMessage,"%s","SIGQUIT:: Terminal quit signal encountered.");
             UpdateProcess(gSignalProcessId,'S');
             exit(0);
          }
          case SIGSEGV:
          {
             TRACEENTRY(1,"%s","SIGSEGV:: Segmentation Fault encountered. Invalid memory referenced.");
             sprintf(gErrorMessage,"%s","SIGSEGV:: Segmentation Fault encountered. Invalid memory referenced.");
             UpdateProcess(gSignalProcessId,'S');
             exit(0);
          }
          case SIGTERM:
          {
             TRACEENTRY(1,"%s","SIGTERM:: Termination signal encountered. Exiting from the process.");
             sprintf(gErrorMessage,"%s","SIGTERM:: Termination signal encountered. Exiting from the process.");
             UpdateProcess(gSignalProcessId,'S');
             exit(0);
          }
          case SIGTSTP:
          {
             TRACEENTRY(1,"%s","SIGTSTP:: Terminal stop signal.");
             sprintf(gErrorMessage,"%s","SIGTSTP:: Terminal stop signal.");
             UpdateProcess(gSignalProcessId,'S');
             exit(0);
          }
          case SIGBUS:
          {
             TRACEENTRY(1,"%s","SIGBUS:: Bus error encountered. Process will be stopped.");
             sprintf(gErrorMessage,"%s","SIGBUS:: Bus error encountered. Process will be stopped.");
             UpdateProcess(gSignalProcessId,'S');
             exit(0);
          }
          case SIGSYS:
          {
             TRACEENTRY(1,"%s","SIGSYS:: Bad system call. Process will be stopped.");
             sprintf(gErrorMessage,"%s","SIGSYS:: Bad system call. Process will be stopped.");
             UpdateProcess(gSignalProcessId,'S');
             exit(0);
          }
      }
}


void UpdateProcess(int ProcessId,char Status)
{
   char r_lock[150] ;
   sprintf(r_lock,"rm %s",gLockFilePathName);

   if(Status == 'R')
   {
      EXEC SQL UPDATE PM_PROCESSES
                  SET START_STOP_FLG           = 'I',
                      PROCESS_STATUS           = 'R',
                      PROCESS_LAST_START_DATE  = CURRENT_DATE
                WHERE PROCESS_ID               = :ProcessId;

      /* Check for Error in Execution */
      if((ERRCODE != 0))
      {
         TRACEENTRY(1,"%s-%d-","Main: Error Updating PM_PROCESSES for the ProcessId :",ProcessId);
         TRACEENTRY(1,"%s-%d-","Main: sqlca.sqlcode :",ERRCODE);
         unlink(gLockFilePathName) ;
         exit(0);
      }

      EXEC SQL INSERT
                 INTO PM_PROCESS_STATUS(PROCESS_ID, UNIX_PID, START_TIME)
               VALUES (:ProcessId ,:gUnixPid , TO_DATE(:gProcessStartDate,'YYYYMMDDHH24MISS')) ;

      if (ERRCODE != 0)
      {
         TRACEENTRY (1,"%s%d","UpdateProcess:Start: Error in inserting data to PM_PROCESS_STATUS. Error Code::",ERRCODE);
      }

      sprintf(gErrorMessage,"%s","Normal Exit");
   }
   else if(Status == 'S')
   {
      EXEC SQL UPDATE PM_PROCESSES
                  SET START_STOP_FLG           = 'I',
                      PROCESS_STATUS           = 'S',
                      PROCESS_LAST_STOP_DATE   = CURRENT_DATE
                WHERE PROCESS_ID               = :ProcessId;

      /* Check for Error in Execution */
      if((ERRCODE != 0) &&(sqlca.sqlerrd[2]==0))
      {
         TRACEENTRY(1,"%s-%d-","UpdateProcess: Error Updating PM_PROCESSES for the ProcessId :",ProcessId);
         TRACEENTRY(1,"%s-%d-","UpdateProcess: sqlca.sqlcode :",ERRCODE);
      }


      EXEC SQL UPDATE PM_PROCESS_STATUS
                  SET STOP_TIME    = CURRENT_DATE,
                      ELAPSED_TIME = (CURRENT_DATE - TO_DATE(:gProcessStartDate,'YYYYMMDDHH24MISS'))*60*60*24,
                      REMARKS      = :gErrorMessage
                WHERE PROCESS_ID   = :ProcessId
                  AND UNIX_PID     = :gUnixPid 
                  AND START_TIME = TO_DATE(:gProcessStartDate,'YYYYMMDDHH24MISS') ;

      if (ERRCODE != 0)
      {
         TRACEENTRY (1,"%s%d","UpdateProcess:Stop: Error in Updating data to PM_PROCESS_STATUS. Error Code::",ERRCODE);
      }
      unlink(gLockFilePathName) ;
   }

   EXEC SQL COMMIT;
}


